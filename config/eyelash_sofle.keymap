#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

&sk { /delete-property/ ignore-modifiers; };

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    hml: homerow_mods_left {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_LEFT_HAND";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        hold-trigger-key-positions = <7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 60 61 62 63 59>;
        tapping-term-ms = <180>;
        flavor = "balanced";
        hold-trigger-on-release;
    };

    hmr: homerow_mods_right {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_RIGHT_HAND";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 26 27 28 29 30 31 39 40 41 42 43 44 53 54 55 56 57>;
        tapping-term-ms = <180>;
        flavor = "balanced";
        hold-trigger-on-release;
    };

    as_ht: autoshift_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "AUTOSHIFT_HOLD_TAP";
        bindings = <&shifted>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <220>;
        flavor = "tap-preferred";
    };

    lt_repeat: lt_repeat {
        compatible = "zmk,behavior-hold-tap";
        label = "LT_REPEAT";
        bindings = <&mo>, <&key_repeat>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
    };

    mo_tap_layer: mo_tap_layer {
        compatible = "zmk,behavior-hold-tap";
        label = "MO_TAP_LAYER";
        bindings = <&mo>, <&tog>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
    };

    macros {
        shifted: shifted {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFTED";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };

        layer_tap: layer_tap {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&macro_param_1to1 &macro_param_1to2 &mo_tap_layer MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &mo_tap_layer MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "LAYER_TAP";
        };
    };

    combos {
        compatible = "zmk,combos";

        cmb_r_h1 {
            bindings = <&kp ESCAPE>;
            key-positions = <34 35>;
        };

        cmb_r_h2 {
            bindings = <&kp GRAVE>;
            key-positions = <34 36>;
        };

        cmb_r_h3 {
            bindings = <&kp BACKSLASH>;
            key-positions = <34 37>;
        };

        cmb_r_b1 {
            bindings = <&kp MINUS>;
            key-positions = <22 34>;
        };

        cmb_r_b2 {
            bindings = <&kp EQUAL>;
            key-positions = <34 23>;
        };

        cmb_l_ta {
            bindings = <&sk LC(LA(LS(LGUI)))>;
            key-positions = <17 16 15>;
        };

        cmb_l_h1 {
            bindings = <&kp LBKT>;
            key-positions = <30 29>;
        };

        cmb_l_h2 {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <30 28>;
        };

        cmb_l_m1 {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 30>;
        };

        cmb_l_m2 {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <30 42>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC         &as N1        &as N2           &as N3        &as N4        &as N5         &kp UP_ARROW     &as N6       &as N7         &as N8            &as N9         &as N0            &kp DELETE
&kp ESCAPE      &kp Q         &kp W            &kp E         &kp R         &kp T          &kp DOWN_ARROW   &kp Y        &kp U          &kp I             &kp O          &kp P             &kp BACKSPACE
&kp TAB         &kp A         &lt 2 S          &lt 1 D       &lt 3 F       &kp G          &kp LEFT_ARROW   &kp H        &kp J          &kp K             &kp L          &lt 4 SEMICOLON   &kp APOS
&kp LEFT_SHIFT  &hml LCTRL Z  &hml LEFT_ALT X  &hml LMETA C  &hml LSHFT V  &kp B          &kp RIGHT_ARROW  &kp N        &hmr RSHIFT M  &hmr RMETA COMMA  &hmr RALT DOT  &hmr RCTRL SLASH  &kp ENTER
&kp C_MUTE      &kp LCTRL     &kp LALT         &kp LMETA     &kp LSHFT     &lt 1 ENTER    &kp ENTER        &lt 1 ENTER  &kp SPACE      &kp BACKSPACE     &none          &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        Numpad {
            bindings = <
&trans  &none      &none     &none     &none      &none     &mmv MOVE_UP     &none      &none   &none   &none   &none      &trans
&trans  &none      &none     &none     &none      &none     &mmv MOVE_DOWN   &none      &as N7  &as N8  &as N9  &as N0     &trans
&trans  &none      &none     &none     &none      &none     &mmv MOVE_LEFT   &as MINUS  &as N4  &as N5  &as N6  &as DOT    &kp SLASH
&trans  &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHFT  &none     &mmv MOVE_RIGHT  &as EQUAL  &as N1  &as N2  &as N3  &as COMMA  &trans
&none   &trans     &trans    &trans    &trans     &trans    &mkp LCLK        &trans     &trans  &trans  &trans  &trans
            >;
        };

        Vi {
            bindings = <
&none  &none   &none   &none   &none          &none     &trans  &none   &none                     &none       &none                      &none       &trans
&none  &none   &none   &none   &kp LC(LS(O))  &none     &trans  &none   &kp LG(LEFT_BRACKET)      &kp RC(T)   &kp LG(RIGHT_BRACKET)      &none       &trans
&none  &none   &none   &none   &kp LC(SPACE)  &none     &trans  &none   &kp LC(RIGHT_BRACKET)     &kp LC(I)   &kp LC(O)                  &kp LS(F6)  &trans
&none  &none   &none   &none   &none          &none     &trans  &none   &kp LG(LS(LEFT_BRACKET))  &kp LS(F6)  &kp LS(LG(RIGHT_BRACKET))  &none       &trans
&none  &trans  &trans  &trans  &trans         &trans    &trans  &trans  &trans                    &trans      &trans                     &trans
            >;

            sensor-bindings = <&inc_dec_kp LG(EQUAL) LG(MINUS)>;
        };

        Navigation {
            bindings = <
&trans         &none      &none     &none     &none      &none     &mmv MOVE_UP     &none      &none            &none           &none      &none          &trans
&trans         &none      &none     &none     &none      &none     &mmv MOVE_DOWN   &kp PG_UP  &kp HOME         &kp UP_ARROW    &kp END    &kp PAGE_DOWN  &trans
&trans         &none      &none     &none     &none      &none     &mmv MOVE_LEFT   &mkp MB1   &kp LEFT_ARROW   &kp DOWN        &kp RIGHT  &none          &trans
&trans         &sk LCTRL  &sk LALT  &sk LGUI  &sk LSHFT  &none     &mmv MOVE_RIGHT  &mkp MB2   &sk RIGHT_SHIFT  &sk RIGHT_META  &sk LALT   &sk LCTRL      &trans
&kp C_AC_ZOOM  &trans     &trans    &trans    &trans     &trans    &mkp MB1         &trans     &trans           &trans          &none      &none
            >;

            sensor-bindings = <&inc_dec_kp PAGE_DOWN PG_UP>;
        };

        FN {
            bindings = <
&trans         &none    &none   &none   &none   &none     &mmv MOVE_UP     &none      &none            &none           &none     &none      &trans
&trans         &kp F12  &kp F9  &kp F8  &kp F7  &none     &mmv MOVE_DOWN   &none      &none            &none           &none     &none      &trans
&trans         &kp F11  &kp F6  &kp F5  &kp F4  &trans    &mmv MOVE_LEFT   &none      &none            &none           &none     &none      &trans
&trans         &kp F10  &kp F3  &kp F2  &kp F1  &trans    &mmv MOVE_RIGHT  &none      &sk RIGHT_SHIFT  &sk RIGHT_META  &sk LALT  &sk LCTRL  &trans
&kp C_AC_ZOOM  &trans   &trans  &trans  &trans  &trans    &mkp MB1         &kp LCTRL  &trans           &trans          &none     &none
            >;

            sensor-bindings = <&inc_dec_kp PAGE_DOWN PG_UP>;
        };

        Symbol {
            bindings = <
&trans  &trans                   &trans           &trans             &trans                     &trans         &trans  &trans          &trans            &trans         &trans         &trans         &trans
&trans  &kp APOS                 &shifted MINUS   &shifted LS(SQT)   &kp COMMA                  &kp DOT        &trans  &shifted N7     &kp DOT           &kp LBKT       &kp RBKT       &shifted N5    &trans
&trans  &shifted N1              &kp EQUAL        &shifted EQUAL     &kp MINUS                  &shifted N3    &trans  &shifted BSLH   &shifted SEMI     &shifted N9    &shifted N0    &shifted FSLH  &trans
&trans  &hml LCTRL LS(NUMBER_6)  &hml LALT SLASH  &hml LMETA LS(N8)  &hml LEFT_SHIFT BACKSLASH  &none          &trans  &shifted GRAVE  &kp LS(NUMBER_4)  &shifted LBKT  &shifted RBKT  &shifted N2    &trans
&trans  &trans                   &trans           &trans             &trans                     &trans         &trans  &trans          &trans            &trans         &trans         &trans
            >;
        };

        System {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &bt BT_CLR       &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &none            &none
&none  &none  &none  &none  &none  &none    &none  &none            &none            &none            &none            &none            &none
&none  &none  &none  &none  &none  &none    &none  &none            &rgb_ug RGB_ON   &rgb_ug RGB_EFF  &rgb_ug RGB_OFF  &none            &none
&none  &none  &none  &none  &none  &none    &none  &rgb_ug RGB_SAI  &rgb_ug RGB_SAD  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &rgb_ug RGB_SPI  &rgb_ug RGB_SPD
&none  &none  &none  &none  &none  &none    &none  &none            &none            &none            &none            &none
            >;

            label = "System";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        System {
            if-layers = <3 1>;
            then-layer = <6>;
        };
    };
};
