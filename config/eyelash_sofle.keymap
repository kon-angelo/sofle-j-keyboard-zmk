#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

&sk { /delete-property/ ignore-modifiers; };

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    hml: homerow_mods_left {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_LEFT_HAND";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        hold-trigger-key-positions = <7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 60 61 62 63 59 53 54 55 56 57 27 28 29 30>;
        tapping-term-ms = <200>;
        flavor = "balanced";
    };

    hmr: homerow_mods_right {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_RIGHT_HAND";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        hold-trigger-key-positions = <0 1 13 14 15 16 17 18 26 27 28 29 30 31 39 40 41 42 43 44 53 54 55 56 2 3 4 5 57 62 63 59 61 60 34 35 36 37>;
        tapping-term-ms = <200>;
        flavor = "balanced";
    };

    as_ht: autoshift_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "AUTOSHIFT_HOLD_TAP";
        bindings = <&shifted>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <190>;
    };

    lt_repeat: lt_repeat {
        compatible = "zmk,behavior-hold-tap";
        label = "LT_REPEAT";
        bindings = <&mo>, <&key_repeat>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
    };

    bckspc_dlt: bckspc_dlt {
        compatible = "zmk,behavior-mod-morph";
        label = "BCKSPC_DLT";
        bindings = <&kp BACKSPACE>, <&kp DELETE>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_RSFT)>;
    };

    macros {
        shifted: shifted {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFTED";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };
    };

    combos {
        compatible = "zmk,combos";

        l_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <47 48>;
        };

        rbkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <47 49>;
        };

        cmb_minus {
            bindings = <&kp MINUS>;
            key-positions = <21 22>;
        };

        cmb_plus {
            bindings = <&kp EQUAL>;
            key-positions = <21 23>;
        };

        cmb_backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <21 24>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp LA(LC(LEFT_META))  &as N1        &as N2           &as N3            &as N4             &as N5    &kp UP_ARROW     &as N6       &as N7              &as N8             &as N9           &as N0                &to 0
&kp ESCAPE             &kp Q         &kp W            &kp E             &kp R              &kp T     &kp DOWN_ARROW   &kp Y        &kp U               &kp I              &kp O            &kp P                 &bckspc_dlt
&lt 3 TAB              &hml LCTRL A  &hml LEFT_ALT S  &hml LEFT_META D  &hml LEFT_SHIFT F  &kp G     &kp LEFT_ARROW   &kp H        &hmr RIGHT_SHIFT J  &hmr RIGHT_META K  &hmr LEFT_ALT L  &hmr RCTRL SEMICOLON  &kp APOS
&sl 1                  &kp Z         &kp X            &kp C             &kp V              &kp B     &kp RIGHT_ARROW  &kp N        &kp M               &kp COMMA          &kp DOT          &kp FSLH              &kp BACKSLASH
&kp C_MUTE             &sk LCTRL     &sk LEFT_ALT     &sk LEFT_META     &lt 1 BACKSPACE    &tog 2    &kp ENTER        &lt 2 ENTER  &kp SPACE           &kp BACKSPACE      &kp ESCAPE       &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        Lower {
            bindings = <
&kp F1  &kp F2            &kp F3            &kp F4             &kp F5            &kp F6           &trans  &kp F7            &kp F8                  &kp F9                &kp F10            &kp F11                      &kp F12
&none   &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)   &kp LS(NUMBER_4)  &kp LS(N5)       &trans  &kp LS(NUMBER_6)  &kp LS(N7)              &kp LS(N8)            &kp LS(N9)         &kp LS(N0)                   &bckspc_dlt
&none   &sk RCTRL         &sk LALT          &sk LGUI           &sk LSHFT         &none            &trans  &none             &hmr RIGHT_SHIFT MINUS  &hmr LEFT_META EQUAL  &hmr LEFT_ALT SQT  &hmr LCTRL LS(SINGLE_QUOTE)  &none
&none   &kp LS(GRAVE)     &kp GRAVE         &kp LS(BACKSLASH)  &kp BACKSLASH     &none            &trans  &none             &kp LEFT_BRACKET        &kp RIGHT_BRACKET     &kp LEFT_BRACE     &kp RIGHT_BRACE              &bckspc_dlt
&none   &none             &none             &none              &kp BACKSPACE     &kp BACKSPACE    &trans  &kp RET           &kp SPACE               &none                 &kp BACKSPACE      &none
            >;

            sensor-bindings = <&inc_dec_kp LG(EQUAL) LG(MINUS)>;
        };

        Navigation {
            bindings = <
&none          &none      &none         &none          &none           &none    &mmv MOVE_UP     &none      &mkp MB1        &mkp MB3        &mkp MB2       &none    &none
&none          &none      &none         &none          &none           &none    &mmv MOVE_DOWN   &none      &mkp MB1        &kp UP_ARROW    &mkp MB2       &none    &none
&none          &kp LCTRL  &kp LEFT_ALT  &kp LEFT_META  &kp LEFT_SHIFT  &none    &mmv MOVE_LEFT   &none      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT      &none    &none
&none          &none      &none         &none          &none           &none    &mmv MOVE_RIGHT  &none      &kp HOME        &kp PG_UP       &kp PAGE_DOWN  &kp END  &none
&kp C_AC_ZOOM  &none      &none         &none          &mo 1           &none    &mkp MB1         &kp ENTER  &kp SPACE       &none           &none          &none
            >;

            sensor-bindings = <&inc_dec_kp PAGE_DOWN LG(PG_UP)>;
        };

        Numpad {
            bindings = <
&none  &none      &none         &none          &none           &none    &mmv MOVE_UP     &none      &kp SLASH                  &kp ASTERISK              &kp MINUS           &kp EQUAL         &bckspc_dlt
&none  &none      &none         &none          &none           &none    &mmv MOVE_DOWN   &none      &kp N7                     &kp NUMBER_8              &kp NUMBER_9        &kp N0            &bckspc_dlt
&none  &sk LCTRL  &sk LEFT_ALT  &sk LEFT_META  &sk LEFT_SHIFT  &none    &mmv MOVE_LEFT   &kp MINUS  &hmr RIGHT_SHIFT NUMBER_4  &hmr RIGHT_META NUMBER_5  &hmr RALT NUMBER_6  &hmr RCTRL EQUAL  &none
&none  &none      &none         &none          &none           &none    &mmv MOVE_RIGHT  &none      &kp NUMBER_1               &kp NUMBER_2              &kp NUMBER_3        &kp PERIOD        &kp ENTER
&none  &none      &none         &none          &none           &none    &mkp LCLK        &kp ENTER  &kp SPACE                  &kp PERIOD                &kp COMMA           &none
            >;
        };

        System {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &bt BT_CLR       &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &none            &none
&none  &none  &none  &none  &none  &none    &none  &none            &none            &none            &none            &none            &none
&none  &none  &none  &none  &none  &none    &none  &none            &rgb_ug RGB_ON   &rgb_ug RGB_EFF  &rgb_ug RGB_OFF  &none            &none
&none  &none  &none  &none  &none  &none    &none  &rgb_ug RGB_SAI  &rgb_ug RGB_SAD  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &rgb_ug RGB_SPI  &rgb_ug RGB_SPD
&none  &none  &none  &none  &none  &none    &none  &none            &none            &none            &none            &none
            >;

            label = "System";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        System {
            if-layers = <2 1>;
            then-layer = <4>;
        };
    };
};
