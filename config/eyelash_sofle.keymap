#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&sk {
    /delete-property/ ignore-modifiers;

    quick-release;
    lazy;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        min {
            bindings = <&as ESCAPE>;
            key-positions = <34 35>;
        };

        esc {
            bindings = <&kp ENTER>;
            key-positions = <30 29>;
            timeout-ms = <90>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <33 34>;
        };

        bkspc {
            bindings = <&kp ENTER>;
            key-positions = <20 21>;
        };

        bksp {
            bindings = <&kp ENTER>;
            key-positions = <21 22>;
        };

        numpad {
            bindings = <&mo 8>;
            key-positions = <16 15>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        num_tog {
            bindings = <&tog 8>;
            key-positions = <15 16 17>;
        };
    };

    hml: homerow_mods_left {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_LEFT_HAND";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        hold-trigger-key-positions = <7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 60 61 62 63 59>;
        tapping-term-ms = <280>;
        flavor = "balanced";
        hold-trigger-on-release;
        require-prior-idle-ms = <100>;
        hold-while-undecided;
    };

    hmr: homerow_mods_right {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_RIGHT_HAND";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 26 27 28 29 30 31 39 40 41 42 43 44 53 54 55 56 57>;
        tapping-term-ms = <280>;
        flavor = "balanced";
        hold-trigger-on-release;
        require-prior-idle-ms = <100>;
        hold-while-undecided;
    };

    as_ht: autoshift_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "AUTOSHIFT_HOLD_TAP";
        bindings = <&shifted>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        flavor = "tap-preferred";
    };

    tap_hml: tap_hml {
        compatible = "zmk,behavior-hold-tap";
        label = "TAP_HML";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        hold-trigger-key-positions = <7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 60 61 62 63 59>;
        tapping-term-ms = <280>;
        flavor = "balanced";
        hold-trigger-on-release;
        require-prior-idle-ms = <100>;
    };

    tap_hmr: tap_hmr {
        compatible = "zmk,behavior-hold-tap";
        label = "TAP_HMR";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 26 27 28 29 30 31 39 40 41 42 43 44 53 54 55 56 57>;
        tapping-term-ms = <280>;
        flavor = "tap-preferred";
        hold-trigger-on-release;
        require-prior-idle-ms = <150>;
    };

    lt2: lt2 {
        compatible = "zmk,behavior-hold-tap";
        label = "LT2";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <180>;
        hold-trigger-key-positions = <35 36 22 48 34>;
        require-prior-idle-ms = <30>;
        hold-trigger-on-release;
    };

    macros {
        shifted: shifted {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFTED";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&none           &as N1        &as N2           &as N3        &as N4        &as N5    &kp UP_ARROW     &as N6       &as N7         &as N8            &as N9         &as N0            &none
&none           &kp Q         &kp W            &kp E         &kp R         &kp T     &kp DOWN_ARROW   &kp Y        &kp U          &kp I             &kp O          &kp P             &none
&none           &kp A         &kp S            &tap_hml 1 D  &tap_hml 3 F  &kp G     &kp LEFT_ARROW   &kp H        &kp J          &kp K             &kp L          &kp BACKSPACE     &none
&kp LEFT_SHIFT  &hml LCTRL Z  &hml LEFT_ALT X  &hml LMETA C  &hml LSHFT V  &kp B     &kp RIGHT_ARROW  &kp N        &hmr RSHIFT M  &hmr RMETA COMMA  &hmr RALT DOT  &hmr RCTRL SLASH  &sk RIGHT_SHIFT
&kp C_MUTE      &none         &none            &sl 5         &sk LSHFT     &sl 2     &kp ENTER        &lt 2 ENTER  &lt2 4 SPACE   &tog 3            &none          &mo 6
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "Base";
        };

        Vi {
            bindings = <
&none  &none   &none   &none   &none              &none            &trans  &none   &none                     &none       &none                      &none   &trans
&none  &none   &none   &none   &kp LG(GRAVE)      &none            &trans  &none   &kp LG(LEFT_BRACKET)      &kp RC(T)   &kp LG(RIGHT_BRACKET)      &none   &trans
&none  &none   &none   &none   &kp LC(SPACE)      &none            &trans  &none   &kp LC(RIGHT_BRACKET)     &kp LC(I)   &kp LC(O)                  &trans  &trans
&none  &none   &none   &none   &kp LG(LS(SPACE))  &kp LG(LS(J))    &trans  &none   &kp LG(LS(LEFT_BRACKET))  &kp LS(F6)  &kp LS(LG(RIGHT_BRACKET))  &none   &trans
&none  &trans  &trans  &trans  &trans             &trans           &trans  &trans  &trans                    &trans      &trans                     &trans
            >;

            sensor-bindings = <&inc_dec_kp LG(EQUAL) LG(MINUS)>;
            label = "VI";
        };

        NeoSym {
            bindings = <
&none  &none      &none      &none     &none                   &none               &none  &none              &none                    &none           &none                 &none               &none
&none  &as N1     &as N2     &as N3    &as N4                  &as N5              &none  &as N6             &as N7                   &as N8          &as N9                &as N0              &none
&none  &none      &as GRAVE  &as SQT   &as SINGLE_QUOTE        &as LEFT_BRACKET    &none  &as RIGHT_BRACKET  &as MINUS                &as EQUAL       &kp COLON             &trans              &none
&none  &sk LCTRL  &sk LALT   &sk LGUI  &mt LSHFT LEFT_BRACKET  &as BACKSLASH       &none  &as SLASH          &mt LSHFT RIGHT_BRACKET  &mt LGUI COMMA  &mt RIGHT_ALT PERIOD  &mt RCTRL QUESTION  &none
&none  &none      &none      &none     &none                   &none               &none  &sk LEFT_SHIFT     &trans                   &none           &none                 &none
            >;

            sensor-bindings = <&inc_dec_kp C_NEXT C_PREV>;
        };

        Navigation {
            bindings = <
&trans         &none      &none     &none     &none      &none             &mmv MOVE_UP     &none     &none      &none           &none            &none  &trans
&trans         &none      &none     &none     &none      &none             &mmv MOVE_DOWN   &kp HOME  &kp PG_DN  &kp PG_UP       &kp END          &none  &trans
&trans         &none      &none     &none     &none      &msc SCRL_UP      &mmv MOVE_LEFT   &kp LEFT  &kp DOWN   &kp UP          &kp RIGHT        &none  &trans
&trans         &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHFT  &msc SCRL_DOWN    &mmv MOVE_RIGHT  &mkp MB1  &mkp MB2   &msc SCRL_LEFT  &msc SCRL_RIGHT  &none  &trans
&kp C_AC_ZOOM  &trans     &trans    &trans    &trans     &kp LEFT_SHIFT    &mkp MB1         &to 0     &to 0      &tog 3          &none            &none
            >;

            sensor-bindings = <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>;
        };

        master {
            bindings = <
&none       &none      &none      &none                 &none                     &none             &none  &none       &none              &none          &none          &none  &none
&none       &none      &none      &kp LG(Z)             &kp LG(LS(Z))             &none             &none  &none       &none              &kp ESCAPE     &none          &none  &none
&none       &kp LG(A)  &none      &sk LA(LC(LEFT_GUI))  &sk LS(LA(LC(LEFT_GUI)))  &none             &none  &kp DELETE  &kp ENTER          &kp BACKSPACE  &kp TAB        &none  &none
&caps_word  &kp LG(Z)  &kp LG(X)  &kp LG(C)             &kp LG(V)                 &none             &none  &none       &kp LA(BACKSPACE)  &kp ENTER      &kp LG(ENTER)  &none  &none
&none       &none      &none      &none                 &trans                    &kp LEFT_SHIFT    &none  &none       &trans             &none          &none          &none
            >;

            sensor-bindings = <&inc_dec_kp C_NEXT C_PREV>;
        };

        Flayer {
            bindings = <
&none  &none      &none     &none     &none      &none    &none  &none  &none   &none   &none   &none    &none
&none  &none      &none     &none     &none      &none    &none  &none  &kp F7  &kp F8  &kp F9  &kp F12  &none
&none  &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHFT  &none    &none  &none  &kp F4  &kp F5  &kp F6  &kp F11  &none
&none  &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHFT  &none    &none  &none  &kp F1  &kp F2  &kp F3  &kp F10  &none
&none  &none      &none     &sk LGUI  &none      &none    &none  &none  &none   &none   &none   &none
            >;
        };

        System {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &bt BT_CLR       &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &none            &none
&none  &none  &none  &none  &none  &none    &none  &none            &none            &none            &none            &none            &none
&none  &none  &none  &none  &none  &none    &none  &none            &rgb_ug RGB_ON   &rgb_ug RGB_EFF  &rgb_ug RGB_OFF  &none            &none
&none  &none  &none  &none  &none  &none    &none  &rgb_ug RGB_SAI  &rgb_ug RGB_SAD  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &rgb_ug RGB_SPI  &rgb_ug RGB_SPD
&none  &none  &none  &none  &none  &none    &none  &none            &none            &none            &none            &none
            >;

            label = "System";
            sensor-bindings = <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>;
        };

        NUM {
            bindings = <
&trans  &none                 &none            &none               &none            &none                   &mmv MOVE_UP     &none                  &none                      &none                    &none                    &none             &kp DELETE
&trans  &none                 &as GRAVE        &as APOS            &kp COLON        &kp LEFT_PARENTHESIS    &mmv MOVE_DOWN   &kp RIGHT_PARENTHESIS  &as N7                     &as N8                   &as N9                   &as N0            &trans
&trans  &none                 &kp COLON        &as EQUAL           &as MINUS        &kp LEFT_BRACKET        &mmv MOVE_LEFT   &kp RIGHT_BRACKET      &as N4                     &as N5                   &as N6                   &as DOT           &trans
&trans  &hml LCTRL BACKSLASH  &hml LALT SLASH  &hml LGUI QUESTION  &hml LSHFT PIPE  &kp LEFT_BRACE          &mmv MOVE_RIGHT  &kp RIGHT_BRACE        &hmr RIGHT_SHIFT NUMBER_1  &hmr RIGHT_GUI NUMBER_2  &hmr RIGHT_ALT NUMBER_3  &hmr RCTRL COMMA  &trans
&none   &trans                &trans           &trans              &trans           &sk LEFT_SHIFT          &mkp LCLK        &sk LEFT_SHIFT         &trans                     &sk LGUI                 &sk LALT                 &sk LCTRL
            >;

            sensor-bindings = <&inc_dec_kp C_NEXT C_PREVIOUS>;
        };

        numpad {
            bindings = <
&none   &none  &none  &none  &none  &none             &none  &none      &none   &none   &none   &none      &none
&none   &none  &none  &none  &none  &none             &none  &kp EQUAL  &kp N7  &kp N8  &kp N9  &kp N0     &none
&none   &none  &none  &none  &none  &none             &none  &kp MINUS  &kp N4  &kp N5  &kp N6  &kp DOT    &none
&tog 8  &none  &none  &none  &none  &none             &none  &kp SLASH  &kp N1  &kp N2  &kp N3  &kp COMMA  &none
&none   &none  &none  &none  &none  &kp LEFT_SHIFT    &none  &kp ENTER  &tog 8  &none   &none   &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
