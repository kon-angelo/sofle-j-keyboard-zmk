#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

&sk { /delete-property/ ignore-modifiers; };

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    hml: homerow_mods_left {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_LEFT_HAND";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        hold-trigger-key-positions = <7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 60 61 62 63 59 53 54 55 56 57 40 41 42 43>;
        tapping-term-ms = <200>;
        flavor = "balanced";
    };

    hmr: homerow_mods_right {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_RIGHT_HAND";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        hold-trigger-key-positions = <0 1 13 14 15 16 17 18 26 27 28 29 30 31 39 40 41 42 43 44 53 54 55 56 2 3 4 5 57 62 63 59 61 60 47 48 49 50>;
        tapping-term-ms = <200>;
        flavor = "balanced";
    };

    as_ht: autoshift_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "AUTOSHIFT_HOLD_TAP";
        bindings = <&shifted>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <190>;
        flavor = "tap-preferred";
    };

    lt_repeat: lt_repeat {
        compatible = "zmk,behavior-hold-tap";
        label = "LT_REPEAT";
        bindings = <&mo>, <&key_repeat>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
    };

    bckspc_dlt: bckspc_dlt {
        compatible = "zmk,behavior-mod-morph";
        label = "BCKSPC_DLT";
        bindings = <&kp BACKSPACE>, <&kp DELETE>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_RSFT)>;
    };

    mo_tap_layer: mo_tap_layer {
        compatible = "zmk,behavior-hold-tap";
        label = "MO_TAP_LAYER";
        bindings = <&mo>, <&tog>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
    };

    macros {
        shifted: shifted {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFTED";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };

        layer_tap: layer_tap {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&macro_param_1to1 &macro_param_1to2 &mo_tap_layer MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &mo_tap_layer MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "LAYER_TAP";
        };
    };

    combos {
        compatible = "zmk,combos";

        l_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <21 22>;
            timeout-ms = <35>;
        };

        rbkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <21 23>;
            timeout-ms = <35>;
        };

        cmb_minus {
            bindings = <&kp MINUS>;
            key-positions = <34 35>;
        };

        cmb_plus {
            bindings = <&kp EQUAL>;
            key-positions = <34 36>;
        };

        cmb_backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <34 37>;
        };

        cmb_grave {
            bindings = <&kp GRAVE>;
            key-positions = <21 24>;
        };

        cmb_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <30 29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&none           &as N1        &as N2           &as N3            &as N4        &as N5         &kp UP_ARROW     &as N6       &as N7        &as N8                 &as N9         &as N0            &kp DELETE
&kp ESCAPE      &kp Q         &kp W            &kp E             &kp R         &kp T          &kp DOWN_ARROW   &kp Y        &kp U         &kp I                  &kp O          &kp P             &kp BACKSPACE
&kp TAB         &kp A         &kp S            &kp D             &kp F         &kp G          &kp LEFT_ARROW   &kp H        &kp J         &kp K                  &kp L          &kp SEMICOLON     &kp APOS
&kp LEFT_SHIFT  &hml LCTRL Z  &hml LEFT_ALT X  &hml LEFT_META C  &hml LSHFT V  &kp B          &kp RIGHT_ARROW  &kp N        &hmr RSHFT M  &hmr RIGHT_META COMMA  &hmr RALT DOT  &hmr RCTRL SLASH  &kp ENTER
&kp C_MUTE      &kp LCTRL     &kp LALT         &kp LMETA         &sl 1         &lt 2 ENTER    &kp ENTER        &lt 1 SPACE  &lt 3 SPACE   &kp BACKSPACE          &none          &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        Navigation {
            bindings = <
&trans         &none     &none      &none           &none      &none     &mmv MOVE_UP     &none   &none           &none           &none      &none      &trans
&trans         &none     &mkp MB1   &kp UP_ARROW    &mkp MB2   &none     &mmv MOVE_DOWN   &none   &mkp MB1        &kp UP_ARROW    &mkp MB2   &none      &trans
&trans         &none     &kp LEFT   &kp DOWN_ARROW  &kp RIGHT  &none     &mmv MOVE_LEFT   &none   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &none      &trans
&trans         &sk HOME  &sk PG_UP  &sk PG_DN       &sk END    &none     &mmv MOVE_RIGHT  &none   &sk RSHFT       &sk LGUI        &sk LALT   &sk LCTRL  &trans
&kp C_AC_ZOOM  &trans    &trans     &trans          &trans     &trans    &mkp MB1         &trans  &trans          &trans          &none      &none
            >;

            sensor-bindings = <&inc_dec_kp PAGE_DOWN PG_UP>;
        };

        Numpad {
            bindings = <
&trans  &none      &none     &none     &none      &none     &mmv MOVE_UP     &none      &kp SLASH     &kp ASTERISK  &kp MINUS     &kp EQUAL   &trans
&trans  &none      &none     &none     &none      &none     &mmv MOVE_DOWN   &none      &as N7        &as NUMBER_8  &as NUMBER_9  &kp N0      &trans
&trans  &none      &none     &kp LBKT  &kp RBKT   &none     &mmv MOVE_LEFT   &as MINUS  &as NUMBER_4  &as N5        &as NUMBER_6  &as EQUAL   &none
&trans  &sk RCTRL  &sk LALT  &sk LGUI  &sk LSHFT  &none     &mmv MOVE_RIGHT  &as COMMA  &as NUMBER_1  &as NUMBER_2  &as NUMBER_3  &as PERIOD  &trans
&none   &trans     &trans    &trans    &trans     &trans    &mkp LCLK        &trans     &trans        &trans        &trans        &trans
            >;
        };

        Fn {
            bindings = <
&none  &none   &none    &none    &none    &none     &trans  &none   &none      &none     &none     &none      &trans
&none  &kp F1  &kp F2   &kp F3   &kp F4   &none     &trans  &none   &none      &none     &none     &none      &trans
&none  &kp F5  &kp F6   &kp F7   &kp F8   &none     &trans  &none   &none      &none     &none     &none      &trans
&none  &kp F9  &kp F10  &kp F11  &kp F12  &none     &trans  &none   &sk LSHFT  &sk LGUI  &sk LALT  &sk LCTRL  &trans
&none  &trans  &trans   &trans   &trans   &trans    &trans  &trans  &trans     &trans    &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp LG(EQUAL) LG(MINUS)>;
        };

        System {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &bt BT_CLR       &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &none            &none
&none  &none  &none  &none  &none  &none    &none  &none            &none            &none            &none            &none            &none
&none  &none  &none  &none  &none  &none    &none  &none            &rgb_ug RGB_ON   &rgb_ug RGB_EFF  &rgb_ug RGB_OFF  &none            &none
&none  &none  &none  &none  &none  &none    &none  &rgb_ug RGB_SAI  &rgb_ug RGB_SAD  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &rgb_ug RGB_SPI  &rgb_ug RGB_SPD
&none  &none  &none  &none  &none  &none    &none  &none            &none            &none            &none            &none
            >;

            label = "System";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        System {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
